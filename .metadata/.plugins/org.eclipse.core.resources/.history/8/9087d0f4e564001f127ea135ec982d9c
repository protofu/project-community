package com.kosta.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class WebSecurityConfig {
	private final UserDetailsService userDetailsService;
	
	// 인증 관리자 설정
	@Bean
	AuthenticationManager authenticationManger(HttpSecurity http, BCryptPasswordEncoder bcEncoder, UserDetailsService uds) {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		authProvider.setUserDetailsService(userDetailsService);
		authProvider.setPasswordEncoder(bcEncoder);
		return new ProviderManager(authProvider);
	}
	
	// 암호화 빈
	@Bean
	BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	// HTTP 요청에 따른 보안 구성
	// 개발 초기 모두 열어놓기
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(auth -> 
			auth.requestMatchers(
					"/",
					"/err",
					"/join",
					"/login",
					"/index",
					"/myproject/join",
					"/project/**",
					"/community/list"
				).permitAll()
				// MEMBER, MAINTAINER는 접근 가능
				.requestMatchers(
					"/myproject/**",
					"/community/**"
				).hasAnyRole("ROLE_MEMBER", "MAINTAINER")
				// MAINTAINER만 접근 가능
				.requestMatchers(
					new AntPathRequestMatcher("/maintain/**")
				).hasRole("MAINTAINER")
				.anyRequest().authenticated()
			);
		
		http.formLogin(form -> form
			.loginPage("/login")
			.loginProcessingUrl("/login")
			.defaultSuccessUrl("/project/list", true));
		
		http.logout(logout -> logout
			.logoutUrl("/logout")
			.logoutSuccessUrl("/")
			.invalidateHttpSession(true));
		
		http.csrf(AbstractHttpConfigurer::disable);
		http.cors(AbstractHttpConfigurer::disable);
				
		
		return http.getOrBuild();
	}
	
}
